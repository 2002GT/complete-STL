//   ------------------ ---------STL ----------------------------------

            // 1 - STL in array

                              
#include <iostream>
#include<array>
#include<vector>
#include<deque>
#include<list>
#include<stack>
#include<queue>
#include<set>
#include<map>

#include<algorithm>


using namespace std;

int main()
{
    // simple way ------------
    //   int array[3] ={1,2,3 };  
    //     for(int i=0; i<3; i++)
    //         cout<<array[i]<<endl;
    
   
    
    // //  IMPLEMTING USING STL
    array<int,4>a = {1 , 2, 3 , 4};
    int size = a.size();
    
    for(int i=0; i<size; i++){
        cout<<a[i]<<endl;
    }

cout<<"array at 2nd index ->"<<a.at(2)<<endl;
cout<<"array at front -> "<<a.front()<<endl;
cout<<"array at back ->"<<a.back()<<endl;
   
            // ----------STL in VECTOR------------------
            
    //   Vector is a dynamic array, whose size can be increased,
    //   whereas THE array size can not be changed. Reserve space
    //  can be given for vector, whereas for arrays you cannot give 
    //  reserved space. A vector is a class whereas an array is a datatype.
    
    
    vector<int>v;
    
    cout<<"vector CAPACITY->"<<v.capacity()<<endl;
    
    // adding data
    v.push_back(1);
    v.push_back(2);
    v.push_back(3);
    v.push_back(4);
    
    cout<<"CAPACITY->"<<v.capacity()<<endl;
    cout<<"INDEX AT 2nd index->"<<v.at(1)<<endl;
    cout<<"size->"<<v.size()<<endl;
    cout<<"front element>"<<v.front()<<endl;
    cout<<"back element>"<<v.back()<<endl;
    
    cout<<"before pop"<<endl;
     for(int i:v)
     cout<<i<<" ";
     cout<<endl;
    
    //  v.pop(1) or
     v.pop_back(); 
     
    cout<<"after pop "<<endl;
    for(int i:v)
    cout<<i<<" ";
    cout<<endl;
    
    
    
       
    //   ------------DEQUE----------------------------
    
     deque<int>d ;
     d.push_back(1);
     d.push_back(2);
     d.push_back(3);
     
     cout<<"deque element-> "<<endl;
     for(int i:d)
     
        cout<<i<<" ";
        cout<<endl;
     
     cout<<"after pop_back"<<endl;
       d.pop_back();
       for(int i:d)
       cout<<i<<endl;
          
      
//                          GFG 

//              function---------------

//     void showdq(deque<int> g)
// {
//     deque<int>::iterator it;
//     for (it = g.begin(); it != g.end(); ++it)
//         cout << '\t' << *it;
//     cout << '\n';
// }

// int main()
// {
//     deque<int> gquiz;
//     gquiz.push_back(10);
//     gquiz.push_front(20);
//     gquiz.push_back(30);
//     gquiz.push_front(15);
//     cout << "The deque gquiz is : ";
//     showdq(gquiz);
 
//     cout << "\ngquiz.size() : " << gquiz.size();
//     cout << "\ngquiz.max_size() : " << gquiz.max_size();
 
//     cout << "\ngquiz.at(2) : " << gquiz.at(2);
//     cout << "\ngquiz.front() : " << gquiz.front();
//     cout << "\ngquiz.back() : " << gquiz.back();
 
//     cout << "\ngquiz.pop_front() : ";
//     gquiz.pop_front();
//     showdq(gquiz);
 
//     cout << "\ngquiz.pop_back() : ";
//     gquiz.pop_back();
//     showdq(gquiz);
 
//     return 0;
// }

// OUTPUT-------------
// The deque gquiz is :     15    20    10    30

// gquiz.size() : 4
// gquiz.max_size() : 4611686018427387903
// gquiz.at(2) : 10
// gquiz.front() : 15
// gquiz.back() : 30
// gquiz.pop_front() :     20    10    30

// gquiz.pop_back() :     20    10



//  ------------------- STL in LINKED LIST---------------------------

                    cout<<"linked list->";
                    
                    
                    list<int>l;
                    l.push_back(1);
                    l.push_back(2);
                    l.push_back(3);
                    
                    for(int i:l)
                    cout<<i<<" ";
                    cout<<endl;
                    
                   
    // ------rest in documentation----------------
    
                 
                
                // -------  STACK -------------------
                
                  
                  
                  stack<string>s ;
                  s.push("hey");
                  s.push( "how");
                  s.push("are");
                  s.push("you");
                  
                  cout<<"element AT TOP->" <<s.top();
                  cout<<endl;
                  
                  s.pop();
                  cout<<"element at top after pop->" <<s.top();
                  
                  cout<<endl;

                cout<<"size of stake->"<< s.size();
                cout<<endl;
                cout<<"empty or not -> " <<s.empty();
      
    
        
                            // Queue:


  queue<string> q;
 
  q.push("love");
  q.push("Babbar");
  q.push("Kumar");
 
  cout<<"Size before pop" <<q.size()<<endl;
  
  cout<<"First Element "<<q.front()<<endl;
  q.pop();
  cout<<"First Element "<<q.front()<<endl;
 
  cout<<"Size after pop" <<q.size()<<endl;
 
}


                        //   Priority Queue:



  //max heap
//   priority_queue<int> maxi;
 
//   //min - heap
//   priority_queue<int,vector<int> , greater<int> > mini;
 
//   maxi.push(1);
//   maxi.push(3);
//   maxi.push(2);
//   maxi.push(0);
//   cout<<"size-> "<<maxi.size()<<endl;
//   int n = maxi.size();
//   for(int i=0;i<n;i++) {
//     cout<<maxi.top()<<" ";
//     maxi.pop();
//   }cout<<endl;
 
//   mini.push(5);
//   mini.push(1);
//   mini.push(0);
//   mini.push(4);
//   mini.push(3);
 
//   int m = mini.size();
//   for(int i=0;i<m;i++) {
//     cout<<mini.top()<<" ";
//     mini.pop();
//   }cout<<endl;
 
// cout<<"empty -> "<<mini.empty()<<endl;



// }

        
                            //   Set:




  set<int>s;
 
  s.insert(5);
  s.insert(5);
  s.insert(5);
  s.insert(1);
  s.insert(6);
  s.insert(6);
  s.insert(0);
  s.insert(0);
  s.insert(0);
 
  for(auto i : s) {
    cout<<i<<endl;
  }cout<<endl;
 
set<int>::iterator it = s.begin();
it++;
 
  s.erase(it);
 
  for(auto i : s) {
    cout<<i<<endl;
  }
cout<<endl;
cout<<"-5 is present or not -> "<<s.count(-5)<<endl;
 
set<int>::iterator itr = s.find(5);
 
for(auto it=itr;it!=s.end();it++) {
  cout<<*it<<" ";
}cout<<endl;
 
}





                            // Map:



  map<int,string> m;
 
  m[1]= "babbar";
  m[13]="kumar";
  m[2]="love";
 
  m.insert( {5,"bheem"});
 
  cout<<"before erase"<<endl; 
  for(auto i:m) {
    cout<<i.first<<" "<<i.second<<endl;
  }
 
  cout<<"finding -13 -> " <<m.count(-13)<<endl;
 
 // m.erase(13);
  cout<<"after erase"<<endl;
  for(auto i:m) {
    cout<<i.first<<" "<<i.second<<endl;
  }cout<<endl<<endl;
 
  auto it = m.find(5);
 
  for(auto i=it;i!=m.end();i++) {
    cout<<(*i).first<<endl;
  }
 






                            //   Algo:


 

  
  vector<int> v;
 
  v.push_back(1);
  v.push_back(3);
  v.push_back(6);
  v.push_back(7);
 
  cout<<"Finding 6-> "<<binary_search(v.begin(),v.end(),6)<<endl;
 
  cout<<"lower bound-> "<<lower_bound(v.begin(),v.end(),6)-v.begin()<<endl;
  cout<<"Uppper bound-> "<<upper_bound(v.begin(),v.end(),4)-v.begin()<<endl;
 
  int a =3;
  int b =5;
 
  cout<<"max -> "<<max(a,b);
 
  cout<<"min -> "<<min(a,b);
 
  swap(a,b);
  cout<<endl<<"a-> "<<a<<endl;
 
  string abcd = "abcd";
  reverse(abcd.begin(),abcd.end());
  cout<<"string-> "<<abcd<<endl;
 
  rotate(v.begin(),v.begin()+1,v.end());
  cout<<"after rotate"<<endl;
  for(int i:v){
    cout<<i<<" ";
  }
 
  sort(v.begin(),v.end());
  cout<<"after sorting"<<endl;
for(int i:v){
    cout<<i<<" ";
  }
 
return 0;
}
               
